#!/bin/bash

dotfiles_dir="$HOME/.dotfiles"
dotfiles_dirty_file="$HOME/.dotfiles_dirty"
dotfiles_password_file="$HOME/.dotfiles_password"
dotfiles_checksum_file="$dotfiles_dir/.dotfiles.sum"

command="$1"
parameter="$2"

function repositoryPull() {
  pushd "$dotfiles_dir" > /dev/null
  recursivePull
  popd > /dev/null
}

function recursivePull() {
  git clean -d -x -f
  git checkout -- .
  git pull origin master
  if [  -f .gitmodules ]; then
    git submodule init
    git submodule update
    for submodule in $(grep path .gitmodules | sed 's/.*= //'); do
      pushd "$submodule" > /dev/null
      recursivePull
      popd > /dev/null
    done
  fi
  git clean -d -x -f
}

function repositoryCheck() {
  pushd "$dotfiles_dir" > /dev/null
  git remote update > /dev/null 2>&1
  status=$(git status --porcelain --branch | head -n 1 | grep behind)
  popd > /dev/null
  if [ "$status" == "" ]; then
    return 0
  else
    return 1
  fi
}

function repositoryPush() {
  comment="$1"
  if [ "$comment" == "" ]; then
    comment="Updated from $HOSTNAME"
  fi
  pushd "$dotfiles_dir" > /dev/null
  recursivePush "$comment"
  popd > /dev/null
}

function recursivePush() {
  comment="$1"
  for submodule in $(grep path .gitmodules | sed 's/.*= //'); do
    pushd "$submodule" > /dev/null
    recursivePush "$comment"
    popd > /dev/null
    git add "$submodule"
  done
  git add -A .
  status=$(git status --porcelain)
  if [ "$status" != "" ]; then
    git commit -m "$comment"
    git push
  fi
}

function isUpdated() {
  if [[ ! -f "$HOME$1" ]]; then
    return 1
  elif [[ "$HOME$1" -ot "$dotfiles_dir$1"
       || "$HOME$1" -nt "$dotfiles_dir$1" ]]; then
    return 1
  fi
  return 0
}

function diffFiles() {
  result=$(
    find "$dotfiles_dir" ! -path "*/.git*" -type f ! -name ".DS_Store" ! -name ".dotfiles.sum" ! -name "README.md" -print0 | sort -z | {
      while read -d $'\0' file; do
        file="${file:${#dotfiles_dir}}"
        isUpdated "$file"
        if [ "$?" == "0" ]; then
          continue
        fi
        diffFile "$file" >&2
        if [ "$?" != "0" ]; then
          echo "1"
        fi
      done
    }
  )
  if [ "$result" != "" ]; then
    return 1
  else
    return 0
  fi
}

function diffFile() {
  if [[ ! -f "$HOME$file" ]]; then
    echo "MISSING: $file"
    return 1
  else
    diff=$(diff "$HOME$file" "$dotfiles_dir$file")
    if [ "$diff" != "" ]; then
      echo "MODIFIED: $HOME$file"
      echo "$diff"
      return 1
    fi
  fi
  return 0
}

function addFile() {
  file=$(abspath "$1")
  if [ "${file:0:${#HOME}}" != "$HOME" ]; then
    echo "File not in home directory: $file"
    return
  fi
  if [ ! -f "$file" ]; then
    echo "File not found: $file"
    return
  fi
  file="${file:(${#HOME}+1)}"
  if [ -f "$dotfiles_dir/$file" ]; then
    echo "File already exists: $file"
    return
  fi
  echo "Adding $file"
  directory=$(dirname "$dotfiles_dir/$file")
  mkdir -p "$directory" 2> /dev/null
  cp -p "$HOME/$file" "$dotfiles_dir/$file"
}

function deleteFile() {
  file=$(abspath "$1")
  if [ "${file:0:${#HOME}}" != "$HOME" ]; then
    echo "File not in home directory: $file"
    return
  fi
  file="${file:(${#HOME}+1)}"
  if [ ! -f "$dotfiles_dir/$file" ]; then
    echo "File not found: $file"
    return
  fi
  echo "Deleting $file"
  rm "$dotfiles_dir/$file"
}

function commitFiles() {
  find "$dotfiles_dir" ! -path "*/.git*" -type f ! -name ".DS_Store" ! -name ".dotfiles.sum" ! -name "README.md" -print0 | sort -z | while read -d $'\0' file; do
    file="${file:${#dotfiles_dir}}"
    isUpdated "$file"
    if [[ "$?" != "0" ]]; then
      echo "Committing file $file"
      cp -p "$HOME$file" "$dotfiles_dir$file"
    fi
  done
}

function updateFiles() {
  find "$dotfiles_dir" ! -path "*/.git*" -type f ! -name ".DS_Store" ! -name ".dotfiles.sum" ! -name "README.md" -print0 | sort -z | while read -d $'\0' file; do
    file="${file:${#dotfiles_dir}}"
    isUpdated "$file"
    if [[ "$?" != "0" ]]; then
      echo "Updating $file"
      rm -f "$HOME$file"
      directory=$(dirname "$HOME$file")
      mkdir -p "$directory" 2> /dev/null
      cp -p "$dotfiles_dir$file" "$HOME$file"
    fi
  done
}

function readPassword() {
  if [ -e "$dotfiles_password_file" ]; then
    password=$(cat "$dotfiles_password_file")
    return
  fi
  stty -echo
  read -p "Password: " password; echo
  stty echo
  echo "$password" > "$dotfiles_password_file"
  chmod 600 "$dotfiles_password_file"
}

function calculateChecksum() {
  pushd "$dotfiles_dir" > /dev/null
  export checksum=$(find . ! -path "*/.git*" -type f ! -name ".DS_Store" ! -name ".dotfiles.sum" ! -name "README.md" -print0  | sort -dzf | xargs -0 cat | LC_CTYPE=C tr -d "\15\32" | sed "1s/^/$password/" | shasum -b -a 256 | awk '{print $1}')
  popd > /dev/null
}

function updateChecksum() {
  calculateChecksum
  echo "$checksum" > "$dotfiles_checksum_file"
}

function getDotfilesChecksum() {
  dotfiles_checksum=$(cat "$dotfiles_checksum_file")
}

function verifyChecksum() {
  calculateChecksum
  getDotfilesChecksum
  if [ "$checksum" != "$dotfiles_checksum" ]; then
    echo "*** CHECKSUM VERIFICATION FAILED ***"
    exit 1
  fi
}

function init() {
  if [ -e "$dotfiles_dir" ]; then
    echo "Dotfiles directory already exists: $dotfiles_dir"
    return
  fi
  if [ "$1" == "" ]; then
    echo "No github clone url specified. Run dotfiles init <github clone url> to initialize."
    return
  fi
  echo "Initializing dotfiles from $1."
  rm "$dotfiles_password_file"
  readPassword
  mkdir -p "$dotfiles_dir"
  pushd "$dotfiles_dir" > /dev/null
  git clone "$1" .
  git submodule update --init --recursive
  popd > /dev/null
  verifyChecksum
  updateFiles
}

rm -f $dotfiles_dirty_file
if [ ! -d "$dotfiles_dir" ]; then
  init "git@github.com:bjornhusberg/dotfiles.git"
elif [ "$command" = "reset" ]; then
  echo "Resetting dotfiles."
  rm "$dotfiles_password_file"
  repositoryPull
  diffFiles
  updateFiles
elif [ "$command" = "pull" ]; then
  diffFiles
  if [ "$?" != "0" ]; then
    echo "Dotfiles contain local changes."
    exit
  fi
  echo "Pulling dotfiles."
  readPassword
  verifyChecksum
  repositoryPull
  verifyChecksum
  diffFiles
  updateFiles
elif [ "$command" = "push" ]; then
  diffFiles
  if [ "$?" == "0" ]; then
    echo "Nothing to do."
    exit
  fi
  repositoryCheck
  if [ "$?" != "0" ]; then
    echo "Dotfiles need to be merged."
    exit
  fi
  echo "Pushing dotfiles."
  readPassword
  verifyChecksum
  commitFiles
  updateChecksum
  repositoryPush "$parameter"
elif [ "$command" = "add" ]; then
  repositoryCheck
  if [ "$?" != "0" ]; then
    echo "Dotfiles need to be pulled."
    exit
  fi
  echo "Adding dotfile $parameter."
  readPassword
  verifyChecksum
  addFile "$parameter"
  updateChecksum
  repositoryPush "Added $parameter"
elif [ "$command" = "rm" ]; then
  repositoryCheck
  if [ "$?" != "0" ]; then
    echo "Dotfiles need to be pulled."
    exit
  fi
  echo "Removing dotfile $parameter."
  readPassword
  verifyChecksum
  deleteFile "$parameter"
  updateChecksum
  repositoryPush "Removed $parameter"
elif [ "$command" = "checksum" ]; then
  echo "Updating dotfiles checksum."
  rm "$dotfiles_password_file"
  readPassword
  updateChecksum
elif [ "$command" = "diff" ]; then
  diffFiles
elif [  "$command" = "" ]; then
  diffFiles > /dev/null 2>&1
  if [ "$?" != "0" ]; then
    echo "Dotfiles need to be pushed!"
    touch $dotfiles_dirty_file
    exit
  fi
  repositoryCheck
  if [ "$?" != "0" ]; then
    echo "Dotfiles need to be pulled!"
    touch $dotfiles_dirty_file
    exit
  fi
else
  echo "Usage: $0 [diff|pull|push|add|rm|reset|checksum] files ..."
  exit 1
fi
