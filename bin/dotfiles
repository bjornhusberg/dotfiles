#!/bin/bash

dotfiles_dir="$HOME/.dotfiles"
dotfiles_checksum_file="$dotfiles_dir/.dotfiles.md5"

command="$1"
parameter="$2"

if [ ! -d "$dotfiles_dir" ]; then
  echo "Initializing dotfiles."
  mkdir -p "$dotfiles_dir"
  pushd . > /dev/null
  cd "$dotfiles_dir"
  git clone git@github.com:bjornhusberg/dotfiles.git .
  git submodule update --init
  popd > /dev/null
  command="pull"
fi

function repositoryAdd() {
  pushd . > /dev/null
  cd "$dotfiles_dir"
  git add "$1"
  popd > /dev/null
}

function repositoryRemove() {
  pushd . > /dev/null
  cd "$dotfiles_dir"
  git rm "$1"
  popd > /dev/null
}

function repositoryPull() {
  pushd . > /dev/null
  cd "$dotfiles_dir"
  git pull -q origin master
  popd > /dev/null
}

function repositoryPush() {
  comment="$1"
  if [ "$comment" == "" ]; then
    comment="Dotfile updates from $HOSTNAME"
  fi
  pushd . > /dev/null
  cd "$dotfiles_dir"
  for submodule in $(grep path .gitmodules | sed 's/.*= //'); do
    pushd . > /dev/null
    git add .
    git commit -a -m "$comment"
    git push
    popd > /dev/null
    git add "$submodule"
  done
  git add .
  git commit -m "$comment"
  git push
  popd > /dev/null
}

function readPassword() {
  stty -echo
  read -p "Password: " password; echo
  stty echo
}

function calculateChecksum() {
  export checksum="$password"
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  for file in $(find "$dotfiles_dir" ! -path "*/.git*" -type f ! -name ".DS_Store" ! -name ".dotfiles.md5" ! -name "README.md" | sort); do
    file=${file:${#dotfiles_dir}}
    file_checksum=$(shasum -b -a 256 "$dotfiles_dir/$file" | awk '{print $1}')
    checksum="$checksum${file_checksum:0:64}"
  done
  IFS=$OLDIFS
  checksum=$(echo "$checksum" | shasum -b -a 256)
}

function isUpdated() {
  if [[ ! -f "$HOME$1" ]]; then
    return 1
  elif [[ "$HOME$1" -ot "$dotfiles_dir$1"  
       || "$HOME$1" -nt "$dotfiles_dir$1" ]]; then
    return 1
  fi
  return 0
}

function diffFiles() {
  result=0
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  for file in $(find "$dotfiles_dir" ! -path "*/.git*" -type f ! -name ".DS_Store" ! -name ".dotfiles.md5" ! -name "README.md"); do
    file=${file:${#dotfiles_dir}}
    isUpdated $file
    if [[ "$?" != "0" ]]; then
      if [ "$1" == "true" ]; then
        if [[ ! -f "$HOME$file" ]]; then
          echo "Missing file: $file"
        else
          diff "$dotfiles_dir$file" "$HOME$file"
        fi
      else
        diff -q -N "$dotfiles_dir$file" "$HOME$file" > /dev/null
      fi
      if [ "$?" != "0" ]; then
        result=1
      fi
    fi
  done
  IFS=$OLDIFS
  return $result
}

function addFile() {
  if [ -f "$HOME/$file" ]; then
    if [ ! -f "$dotfiles_dir/$file" ]; then
      echo "Adding $file"
      rmdir "$dotfiles_dir/$file" 2> /dev/null
      cp -p "$HOME/$file" "$dotfiles_dir/$file"
      repositoryAdd "$file"
    else
      echo "File already exists: $file"
    fi
  else
    echo "File not found: $file"
  fi
}

function deleteFile() {
  if [ -f "$dotfiles_dir/$file" ]; then
    echo "Deleting $file"
    rm "$dotfiles_dir/$file"
    repositoryRemove "$file"
  else
    echo "File not found: $file"
  fi
}

function commitFiles() {
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  for file in $(find "$dotfiles_dir" ! -path "*/.git*" -type f ! -name ".DS_Store" ! -name ".dotfiles.md5" ! -name "README.md"); do
    file=${file:${#dotfiles_dir}}
    isUpdated $file
    if [[ "$?" != "0" ]]; then
      echo "Committing file $file"
      cp -p "$HOME$file" "$dotfiles_dir$file"
    fi
  done
  IFS=$OLDIFS
}

function updateFiles() {
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  for file in $(find "$dotfiles_dir" ! -path "*/.git*" -type f ! -name ".DS_Store" ! -name ".dotfiles.md5" ! -name "README.md"); do
    file=${file:${#dotfiles_dir}}
    isUpdated $file
    if [[ "$?" != "0" ]]; then
      echo "Updating $file"
      rm -f "$HOME$file"
      mkdir -p "$HOME$file" 2> /dev/null
      rmdir "$HOME$file" 2> /dev/null
      cp -p "$dotfiles_dir$file" "$HOME$file"
    fi
  done
  IFS=$OLDIFS
}

function updateChecksum() {
  calculateChecksum
  echo "$checksum" > "$dotfiles_checksum_file"
  repositoryAdd "$dotfiles_checksum_file"
}

function getDotfilesChecksum() {
  dotfiles_checksum=$(cat "$dotfiles_checksum_file")
}

function verifyChecksum() {
  calculateChecksum
  getDotfilesChecksum
  if [ "$checksum" != "$dotfiles_checksum" ]; then
    echo "*** CHECKSUM VERIFICATION FAILED ***"
    exit 1
  fi
}

if [ "$command" = "pull" ]; then
  repositoryPull
  diffFiles "true"
  echo "Overwriting local dotfiles. Enter password or press Ctrl-C to abort now!"
  readPassword
  verifyChecksum
  updateFiles
elif [ "$command" = "push" ]; then
  diffFiles "true"
  echo "Overwriting remote dotfiles. Enter password or press Ctrl-C to abort now!"
  readPassword
  repositoryPull
  verifyChecksum
  commitFiles
  updateChecksum
  repositoryPush "$parameter"
elif [ "$command" = "add" ]; then
  echo "Adding dotfile: $parameter. Enter password or press Ctrl-C to abort now!"
  readPassword
  repositoryPull
  verifyChecksum
  addFile "$parameter"
  updateChecksum
  repositoryPush "Added $parameter"
elif [ "$command" = "rm" ]; then
  echo "Deleting dotfile: $parameter. Enter password or press Ctrl-C to abort now!"
  readPassword
  repositoryPull
  verifyChecksum
  deleteFile "$parameter"
  updateChecksum
  repositoryPush "Removed $parameter"
elif [ "$command" = "checksum" ]; then
  echo "Updating dotfiles checksum. Enter password or press Ctrl-C to abort now!"
  readPassword
  repositoryPull
  updateChecksum
  repositoryPush "Updated checksum"
elif [ "$command" = "diff" ]; then
  repositoryPull
  diffFiles "true"
elif [  "$command" = "" ]; then
  repositoryPull
  diffFiles "false"
  if [ "$?" != "0" ]; then
    echo "Dotfiles are out of sync!"
  fi
else
  echo "Usage: $0 [diff|pull|push|add|rm|checksum] files ..."
  exit 1
fi


