#!/bin/bash

gitrepo_ssh="git@github.com:bjornhusberg"
gitrepo_https="https://github.com/bjornhusberg"

dotfiles_dir="$HOME/.dotfiles"
dotfiles_lib_dir="$dotfiles_dir/lib"
dotfiles_dirty_file="$HOME/.dotfiles_dirty"
dotfiles_lib_file="$dotfiles_dir/.dotfiles_lib"

function run() {
  local command="$1"
  local parameter="$2"
  if [[ ! -d "$dotfiles_dir" ]]; then
    init
  fi
  if [[ "$command" == "reset" ]]; then
    reset
  elif [[ "$command" == "pull" ]]; then
    pull
  elif [[ "$command" == "push" ]]; then
    push "$parameter"
  elif [[ "$command" == "add" ]]; then
    add "$parameter"
  elif [[ "$command" == "rm" ]]; then
    remove "$parameter"
  elif [[ "$command" == "diff" ]]; then
    diffFiles
  elif [[ "$command" == "status" ]]; then
    status
  else
    echo "Usage: $0 [diff|pull|push|add|rm|reset|status] files ..."
    exit 1
  fi
}

function init() {
  clone dotfiles "$dotfiles_dir"
  if [[ -f "$dotfiles_lib_file" ]]; then
    for lib in $(cat "$dotfiles_lib_file"); do
      clone "$lib" "$dotfiles_lib_dir/$lib"
    done
  fi
  updateFiles
  rm -f "$dotfiles_dirty_file"
}

function reset() {
  echo "Resetting dotfiles."
  repositoryPull
  diffFiles
  updateFiles
  rm -f "$dotfiles_dirty_file"
}

function pull() {
  echo "Pulling dotfiles."
  diffFiles
  if (( $? != 0 )); then
    echo "Dotfiles contain local changes."
    exit
  fi
  repositoryPull
  diffFiles
  updateFiles
  rm -f "$dotfiles_dirty_file"
}

function push() {
  echo "Pushing dotfiles."
  local comment="$1"
  diffFiles
  if (( $? == 0 )); then
    echo "Nothing to do."
    exit
  fi
  repositoryCheck
  if (( $? != 0 )); then
    echo "Dotfiles need to be merged."
    exit
  fi
  commitFiles
  repositoryPush "$comment"
  rm -f "$dotfiles_dirty_file"
}

function add() {
  local path="$1"
  repositoryCheck
  if (( $? != 0 )); then
    echo "Dotfiles need to be pulled."
    exit
  fi
  echo "Adding dotfile $path."
  addFile "$path"
  repositoryPush "Added $path."
}

function remove() {
  local path="$1"
  repositoryCheck
  if (( $? != 0 )); then
    echo "Dotfiles need to be pulled."
    exit
  fi
  echo "Removing dotfile $path."
  deleteFile "$path"
  repositoryPush "Removed $path."
}

function status() {
  diffFiles > /dev/null 2>&1
  if (( $? != 0 )); then
    echo "Dotfiles need to be pushed."
    touch "$dotfiles_dirty_file"
    exit
  fi
  repositoryCheck
  if (( $? != 0 )); then
    echo "Dotfiles need to be pulled."
    touch "$dotfiles_dirty_file"
    exit
  fi
  rm -f "$dotfiles_dirty_file"
  echo "Dotfiles are up to date."
}

function listDotfiles() {
  find "$dotfiles_dir" -type f \
    ! -path "$dotfiles_lib_dir/*" \
    ! -path "*/.git*" \
    ! -name ".DS_Store" \
    ! -name ".dotfiles_sum" \
    ! -name "README.md" \
    -print0 | sort -dzf
  if [[ -f "$dotfiles_lib_file" ]]; then
    for lib in $(cat "$dotfiles_lib_file"); do
      find "$dotfiles_lib_dir/$lib" -type f \
        ! -path "*/.git*" \
        ! -name ".DS_Store" \
        ! -name "README.md" \
        -print0 | sort -dzf
    done
  fi
}

function clone() {
  local module=$1
  local directory=$2
  local sshResult="$(ssh -qT git@github.com 2>&1)"
  if [[ "${sshResult:0:2}" == "Hi" ]]; then
    local gitrepo="${gitrepo_ssh}"
  else
    local gitrepo="${gitrepo_https}"
  fi
  local url="${gitrepo}/${module}.git"
  echo "Initializing $module from $url."
  mkdir -p "$directory"
  pushd "$directory" > /dev/null
  git clone -q "$url" .
  popd > /dev/null
}

function repositoryPull() {
  directoryPull "$dotfiles_dir"
  if [[ -f "$dotfiles_lib_file" ]]; then
    for lib in $(cat "$dotfiles_lib_file"); do
      local libdir="$dotfiles_lib_dir/$lib"
      if [[ ! -d "$libdir" ]]; then
        clone "$lib" "$libdir"
      else
        directoryPull "$libdir"
      fi
    done
  fi
}

function directoryPull() {
  local directory="$1"
  pushd "$directory" > /dev/null
  git pull -q origin main
  popd > /dev/null
}

function repositoryCheck() {
  directoryCheck "$dotfiles_dir"
  if (( $? != 0 )); then
    return 1
  fi
  if [[ -f "$dotfiles_lib_file" ]]; then
    for lib in $(cat "$dotfiles_lib_file"); do
      directoryCheck "$dotfiles_lib_dir/$lib"
      if (( $? != 0 )); then
        return 1
      fi
    done
  fi
  return 0
}

function directoryCheck() {
  local directory="$1"
  pushd "$directory" > /dev/null
  git remote update > /dev/null 2>&1
  local status=$(git status --porcelain --branch | head -n 1 | grep behind)
  popd > /dev/null
  if [[ ! -z "$status" ]]; then
    return 1
  fi
  return 0
}

function repositoryPush() {
  local comment="$1"
  if [[ -z "$comment" ]]; then
    local comment="Dotfiles update"
  fi
  directoryPush "$dotfiles_dir" "$comment"
  if [[ -f "$dotfiles_lib_file" ]]; then
    for lib in $(cat "$dotfiles_lib_file"); do
      directoryPush "$dotfiles_lib_dir/$lib" "$comment"
    done
  fi
}

function directoryPush() {
  local directory="$1"
  local comment="$2"
  pushd "$directory" > /dev/null
  git add -A .
  local status=$(git status --porcelain)
  if [[ ! -z "$status" ]]; then
    git commit -q -m "$comment"
    git push -q origin main
  fi
  popd > /dev/null
}

function isUpdated() {
  local path="$1"
  if [[ ! -f "$HOME$path" ]]; then
    return 1
  elif [[ "$HOME$path" -ot "$dotfiles_dir$path"
       || "$HOME$path" -nt "$dotfiles_dir$path" ]]; then
    return 1
  fi
  return 0
}

function diffFiles() {
  local result=$(
    listDotfiles | while read -d $'\0' file; do
      local file="${file:${#dotfiles_dir}}"
      isUpdated "$file"
      if (( $? == 0 )); then
        continue
      fi
      diffFile "$file" >&2
      if (( $? != 0 )); then
        echo "1"
      fi
    done
  )
  if [[ ! -z "$result" ]]; then
    return 1
  fi
  return 0
}

function diffFile() {
  if [[ ! -f "$HOME$file" ]]; then
    echo "MISSING: $file"
    return 1
  else
    local diff=$(diff "$HOME$file" "$dotfiles_dir$file")
    if [[ ! -z "$diff" ]]; then
      echo "MODIFIED: $HOME$file"
      echo "$diff"
      return 1
    fi
  fi
  return 0
}

function addFile() {
  local file=$(abspath "$1")
  if [[ "${file:0:${#HOME}}" != "$HOME" ]]; then
    echo "File not in home directory: $file"
    return
  fi
  if [[ ! -f "$file" ]]; then
    echo "File not found: $file"
    return
  fi
  local file="${file:(${#HOME}+1)}"
  if [[ -f "$dotfiles_dir/$file" ]]; then
    echo "File already exists: $file"
    return
  fi
  echo "Adding $file"
  local directory=$(dirname "$dotfiles_dir/$file")
  mkdir -p "$directory" 2> /dev/null
  cp -p "$HOME/$file" "$dotfiles_dir/$file"
}

function deleteFile() {
  local file=$(abspath "$1")
  if [[ "${file:0:${#HOME}}" != "$HOME" ]]; then
    echo "File not in home directory: $file"
    return
  fi
  local file="${file:(${#HOME}+1)}"
  if [[ ! -f "$dotfiles_dir/$file" ]]; then
    echo "File not found: $file"
    return
  fi
  echo "Deleting $file"
  rm -f "$dotfiles_dir/$file"
}

function commitFiles() {
  listDotfiles | while read -d $'\0' file; do
    local file="${file:${#dotfiles_dir}}"
    isUpdated "$file"
    if (( $? != 0 )); then
      echo "Committing file $file"
      cp -p "$HOME$file" "$dotfiles_dir$file"
    fi
  done
}

function updateFiles() {
  listDotfiles | while read -d $'\0' file; do
    local file="${file:${#dotfiles_dir}}"
    isUpdated "$file"
    if (( $? != 0 )); then
      echo "Updating $file"
      rm -f "$HOME$file"
      local directory=$(dirname "$HOME$file")
      mkdir -p "$directory" 2> /dev/null
      cp -p "$dotfiles_dir$file" "$HOME$file"
    fi
  done
}

function require() {
  while (( "$#" )); do
    if [[ -z "$(which $1 2>/dev/null)" ]]; then
      echo "Please install $1"
      exit 1
    fi
    shift
  done
}

require git sort

run "$1" "$2"
