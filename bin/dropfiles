#!/bin/bash

dropbox_shell_dir="$HOME/Dropbox/System/shell"
dropbox_checksum_file="$HOME/Dropbox/System/shell.md5"

if [ -d "$dropbox_shell_dir" ]; then
  cd "$dropbox_shell_dir"
else 
  echo "Shell directory not found. Terminating!"
  exit 1
fi

function readPassword() {
  stty -echo
  read -p "Password: " password; echo
  stty echo
}

function calculateChecksum() {
  export checksum="$password"
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  for file in $(find . -type f ! -iname ".DS_Store"); do
    file_checksum=$(shasum -a 256 "$dropbox_shell_dir/$file")
    checksum="$checksum${file_checksum:0:64}"
  done
  IFS=$OLDIFS
  checksum=$(echo "$checksum" | shasum -a 256)
}

function isUpdated() {
  if [[ ! -f "$HOME/$1" ]]; then
    return 1
  elif [[ "$HOME/$1" -ot "$dropbox_shell_dir/$1"  
       || "$HOME/$1" -nt "$dropbox_shell_dir/$1" ]]; then
    return 1
  fi
  return 0
}

function diffFiles() {
  result=0
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  for file in $(find . -type f ! -iname ".DS_Store"); do
    isUpdated $file
    if [[ "$?" != "0" ]]; then
      if [ "$1" == "diff" ]; then
        diff "$dropbox_shell_dir/$file" "$HOME/$file"
      else
        diff -q -N "$dropbox_shell_dir/$file" "$HOME/$file" > /dev/null
      fi
      if [ "$?" != "0" ]; then
        result=1
      fi
    fi
  done
  IFS=$OLDIFS
  return $result
}

function addFiles() {
  while (( "$#" )); do
    file="$1"
    if [ -f "$HOME/$file" ]; then
      if [ ! -f "$dropbox_shell_dir/$file" ]; then
        echo "Adding $file"
        mkdir -p "$dropbox_shell_dir/$file"
        rmdir "$dropbox_shell_dir/$file"
        cp -p "$HOME/$file" "$dropbox_shell_dir/$file"
      else
        echo "File already exists: $file"
      fi
    else
      echo "File not found: $file"
    fi
    shift
  done
}

function deleteFiles() {
  while (( "$#" )); do
    file="$1"
    if [ -f "$dropbox_shell_dir/$file" ]; then
      echo "Deleting $file"
      rm "$dropbox_shell_dir/$file"
    else
      echo "File not found: $file"
    fi
    shift
  done
}

function commit() {
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  for file in $(find . -type f ! -iname ".DS_Store"); do
    isUpdated $file
    if [[ "$?" != "0" ]]; then
      echo "Committing file $file"
      cp -p "$HOME/$file" "$dropbox_shell_dir/$file"
    fi
  done
  IFS=$OLDIFS
}

function update() {
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  for file in $(find . -type f ! -iname ".DS_Store"); do
    isUpdated $file
    if [[ "$?" != "0" ]]; then
      echo "Updating file $file"
      rm -f "$HOME/$file"
      mkdir -p "$HOME/$file"
      rmdir "$HOME/$file"
      cp -p "$dropbox_shell_dir/$file" "$HOME/$file"
    fi
  done
  IFS=$OLDIFS
}

function updateChecksum() {
  calculateChecksum
  echo "$checksum" > "$dropbox_checksum_file"
}

function getDropboxChecksum() {
  dropbox_checksum=$(cat "$dropbox_checksum_file")
}

function verifyChecksum() {
  calculateChecksum
  getDropboxChecksum
  if [ "$checksum" != "$dropbox_checksum" ]; then
    echo "*** CHECKSUM VERIFICATION FAILED ***"
    exit 1
  fi
}

command="$1"
shift

if [ "$command" = "update" ]; then
  diffFiles diff
  echo "Overwriting local files. Enter password or press Ctrl-C to abort now!"
  readPassword
  verifyChecksum
  update
elif [ "$command" = "commit" ]; then
  diffFiles diff
  echo "Overwriting remote files. Enter password or press Ctrl-C to abort now!"
  readPassword
  verifyChecksum
  commit
  updateChecksum
elif [ "$command" = "add" ]; then
  echo "Overwriting remote files. Enter password or press Ctrl-C to abort now!"
  readPassword
  verifyChecksum
  addFiles "$@"
  updateChecksum
elif [ "$command" = "delete" ]; then
  echo "Overwriting remote files. Enter password or press Ctrl-C to abort now!"
  readPassword
  verifyChecksum
  deleteFiles "$@"
  updateChecksum
elif [ "$command" = "checksum" ]; then
  echo "Updating remote checksum. Enter password or press Ctrl-C to abort now!"
  readPassword
  updateChecksum
elif [[ "$command" = "" || "$command" = "diff" ]]; then 
  diffFiles "$command"
  if [ "$?" != "0" ]; then
    echo "Shell is out of sync! [V]iew, [U]pdate, [C]ommit, [I]gnore?"
    read -n 1 choice
    echo
    if [[ "$choice" == "v" || "$choice" == "V" ]]; then
      $0 diff
    elif [[ "$choice" == "u" || "$choice" == "U" ]]; then
      $0 update
    elif [[ "$choice" == "c" || "$choice" == "C" ]]; then
      $0 commit
    fi
  fi  
else
  echo "Usage: $0 [diff|update|commit|add|delete|checksum]"
  exit 1
fi

